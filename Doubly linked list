#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
    struct node *prev;
};
struct node *head,*newnode,*temp,*prenode,*flag,*tail;

int count() 
{
    int c = 0;
    temp = head;
    while(temp != NULL) {
        c++;
        temp = temp->next;
    }
    return c;
}

void display_1() 
{
    temp = head;
    int i = 1;
    printf("\nData in node is = \n");
    while (temp != NULL)
    {
        printf("Node %d) data: %d  address: %p  next address: %p\n", i, temp->data,temp,temp->next);
        temp = temp->next;
        i++;
    }
}

void display_2()
{
    flag=tail;
    int i=count();
    printf("\nData in node is = \n");
    while(flag!=NULL)
    {
        printf("Node %d) data: %d  address: %p  next address: %p\n", i, flag->data,flag,flag->prev);
        flag=flag->prev;
        i--;
    }
}

int main()
{
    int n,i,ch,b=12;
    printf("Enter the no of node = ");
    scanf("%d",&n);
    head=NULL;
    for(i=0;i<n;i++)
    {
        newnode=(struct node*)malloc(sizeof(struct node));
        printf("\nEnter the data = ");
        scanf("%d",&newnode->data);
        
        if(head==NULL)
        {
            head=tail=newnode;
        }
        else
        {
            tail->next=newnode;
            newnode->prev=tail;
            tail=newnode;
        }
        newnode->next = NULL;
    }
    display_1();
    printf("\n");
    display_2();
    printf("\nSize of structure = %lu",sizeof(struct node));
    
    while(b!=0)
    {
        printf("\n1.insert at first\n");
        printf("2.insert at last\n");
        printf("3.insert at position\n");
        printf("4.delete at first\n");
        printf("5.delete at last\n");
        printf("6.delete at position\n");
        printf("7.Exit\n");
        
        printf("Enter your choice = ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                newnode=(struct node*)malloc(sizeof(struct node));
                printf("Enter the data  = ");
                scanf("%d",&newnode->data);
                
                if(head==NULL)
                {
                    head=tail=newnode;
                    newnode->next=NULL;
                    newnode->prev=NULL;
                }
                else
                {
                    newnode->next=head;
                    head->prev=newnode;
                    head=newnode;
                    newnode->prev=NULL;
                }
                display_1();
                printf("\n");
                display_2();
                break;
                
            case 2:
                newnode=(struct node*)malloc(sizeof(struct node));
                printf("Enter the data = ");
                scanf("%d",&newnode->data);
                
                if(head==NULL)
                {
                    head=tail=newnode;
                    newnode->next=NULL;
                    newnode->prev=NULL;
                }
                else
                {
                    tail->next=newnode;
                    newnode->prev=tail;
                    tail=newnode;
                    newnode->next=NULL;
                }
                display_1();
                printf("\n");
                display_2();
                break;
                
            case 3:
                {
                    int pos, i=1;
                    printf("Enter the position = ");
                    scanf("%d",&pos);
                    int ct=count();
                    
                    if(pos<1 || pos>ct+1)
                    {
                        printf("Invalid Position ");
                        break;
                    }
                    
                    newnode=(struct node*)malloc(sizeof(struct node));
                    printf("Enter the data = ");
                    scanf("%d",&newnode->data);
                    
                    if(pos==1)
                    {
                        newnode->next=head;
                        newnode->prev=NULL;
                        if(head!=NULL)
                            head->prev=newnode;
                        head=newnode;
                        if(tail==NULL)
                            tail=newnode;
                    }
                    else
                    {
                        temp=head;
                        for(i=1;i<pos-1;i++)
                        {
                            temp=temp->next;
                        }
                        newnode->next=temp->next;
                        newnode->prev=temp;
                        if(temp->next!=NULL)
                            temp->next->prev=newnode;
                        temp->next=newnode;
                        if(newnode->next==NULL)
                            tail=newnode;
                    }
                    display_1();
                    printf("\n");
                    display_2();
                }
                break;
                
            case 4:
                if(head==NULL)
                {
                    printf("List is Empty");
                }
                else if(head->next==NULL)
                {
                    temp=head;
                    head=tail=NULL;
                    free(temp);
                }
                else
                {
                    temp=head;
                    head=head->next;
                    head->prev=NULL;
                    free(temp);
                }
                display_1();
                printf("\n");
                display_2();
                break;
                
            case 5:
                if(head==NULL)
                {
                    printf("List is Empty");
                }
                else if(head->next==NULL)
                {
                    temp=head;
                    head=tail=NULL;
                    free(temp);
                }
                else
                {
                    temp=tail;
                    tail=tail->prev;
                    tail->next=NULL;
                    free(temp);
                }
                display_1();
                printf("\n");
                display_2();
                break;
                
            case 6:
                {
                    int posi;
                    if(head == NULL) {
                        printf("link list empty");
                        break;
                    }
                    display_1();
                    printf("enter at which position u want to delete ");
                    scanf("%d",&posi);
                    int cnt=count();
                    if(posi < 1 || posi > cnt) {
                        printf("invalid option");
                        break;
                    }
                    if(posi == 1) 
                    {
                        temp = head;
                        head = head->next;
                        if(head != NULL) 
                        {
                            head->prev = NULL;
                        }
                        else 
                        {
                            tail = NULL;
                        }
                        free(temp);
                    }
                    else 
                    {
                        temp = head;
                        for(int i = 1; i < posi; i++) 
                        {
                            prenode = temp;
                            temp = temp->next;
                        }
                        prenode->next = temp->next;
                        if(temp->next != NULL) 
                        {
                            temp->next->prev = prenode;
                        }
                        else 
                        {
                            tail = prenode;
                        }
                        free(temp);
                    }
                    display_1();
                    printf("\n");
                    display_2();
                }
                break;
                
            case 7:
                b=0;
                printf("Successfully Exited");
                break;
                
            default:
                printf("Invalid choice");   
        }
    }
    return 0;
}
